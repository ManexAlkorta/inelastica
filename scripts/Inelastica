#! /usr/bin/env python

from optparse import OptionParser, OptionGroup
from Inelastica import Inelastica
from Inelastica import SiestaIO as SIO
import numpy as N
import os,string

usage = "usage: %prog [options]"
description = """
Inelastica script calculates and writes LOE quantities in ascii (Systemlabel.IN) and NetCDF (Systemlabel.IN.nc) 

For help use --help!
"""
parser = OptionParser(usage,description=description)
parser.add_option("-n", "--NumChan", dest="numchan", help="Number of eigenchannels [%default]",
                  type='int', default=4)
parser.add_option("-e", "--Energy", dest='energy', default=0.0,type='float',
                  help="Energy where eigenchannel scattering states are evaluated [%default eV]")
parser.add_option("--eta", dest='eta', default=0.000001,type='float',
                  help="Tiny imag. part in Green's functions etc. [%default eV]")
parser.add_option("-f", "--fdf", dest='fdfFile', default='./RUN.fdf',type='string',
                  help="fdf file used for transiesta calculation [%default]")
parser.add_option("-s", "--iSpin", dest='iSpin', default=0,type='int',
                 help="Spin channel [%default]")

parser.add_option("-x","--k1", dest='k1', default=0.0,type='float',
                  help="k-point along a1 [%default]")
parser.add_option("-y","--k2", dest='k2', default=0.0,type='float',
                  help="k-point along a2 [%default]")

#parser.add_option("-k", "--kPoint", dest='kPoint', default='[0.0,0.0]',type='string',
#                  help="2D k-point in range [0,1[ given as string, default=%default")

parser.add_option("-p", "--PhononNetCDF", dest='PhononNetCDF', default=None,type='string',
                  help="Electron-phonon coupling NetCDF [%default]")
parser.add_option("-t", "--Temp", dest='Temp', default=4.2,type='float',
                  help="Temperature [%default K]")
parser.add_option("-b", "--BiasPoints", dest='biasPoints', default=801,type='int',
                  help="Number of bias points [%default]")
parser.add_option("-v", "--MinMaxVoltage", dest='MinMaxVoltage', default='-0.4:0.4',type='string',
                  help="Voltage range ['%default' V]")
parser.add_option("-c", "--ModeCutoff", dest='modeCutoff', default='0.0025',type='float',
                  help="Ignore phonon modes with lower hw [%default eV]")
parser.add_option("-V", "--Vrms", dest='Vrms', default='0.005',type='float',
                  help="Lock in amplifier broadening [%default V]")
parser.add_option("-H", "--Heating", dest='PhHeating', default=False,action='store_true',
                  help="Include heating of vibrational modes [%default]")
parser.add_option("-d", "--PhExtDamp", dest='PhExtDamp', default=1e-15,type='float',
                  help="External damping [%default (?) TODO check unit!]")
(general, args) = parser.parse_args()

print description

# Check k-point input
general.kPoint = N.array([general.k1,general.k2,0],N.float)
        
if not os.path.exists(general.fdfFile):
    parser.error("No input fdf file found, specify with --fdf=file.fdf (default RUN.fdf)")

try:
    general.from_atom = SIO.GetFDFlineWithDefault(
        general.fdfFile,'TS.TBT.PDOSFrom', int, None, 'Inelastica')
    general.to_atom = SIO.GetFDFlineWithDefault(
        general.fdfFile,'TS.TBT.PDOSTo', int, None, 'Inelastica')
except:
    parser.error("Specify device region with TS.TBT.PDOS[To/From] keyword.")

print general.MinMaxVoltage
print string.split(general.MinMaxVoltage,':')
try:
    tmp=string.split(general.MinMaxVoltage,':')
    general.minBias = float(tmp[0])
    general.maxBias = float(tmp[1])
except:
    parser.error("ERROR: Inelastica failed to parse bias voltage!")

Inelastica.main(general)
