#! /usr/bin/env python

import numpy as N
from optparse import OptionParser, OptionGroup
import os, sys, subprocess
        
usage = "usage: %prog [options] DestinationDirectory"

description = """pyTBT is the Python version of TBtrans originally developed by Mads Brandbyge.
For help use --help!
 """
parser = OptionParser(usage,description=description)

# keywords with defaults from fdf-file:
parser.add_option("-f", "--fdf", dest='fn',default='./RUN.fdf',type='string',
                  help="Input fdf-file for TranSIESTA calculation [%default]")
parser.add_option("-F","--DeviceFirst", dest='DeviceFirst',default=1,type='int',
                  help="First device atom (SIESTA numbering) [%default]")
parser.add_option("-L","--DeviceLast", dest='DeviceLast',default=0,type='int',
                  help="Last device atom (SIESTA numbering) [NumberOfAtoms]")
parser.add_option("-N","--NPoints", dest='NPoints',default=0,type='int',
                  help="Energy points [TS.TBT.NPoints]")
parser.add_option("--Emin", dest='Emin',default=1e10,type='float',
                  help="First energy point [TS.TBT.Emin]")
parser.add_option("--Emax", dest='Emax',default=1e10,type='float',
                  help="Last energy point [TS.TBT.Emax]")

# k-points related
parser.add_option("-x","--Nk1", dest='Nk1', default=1,type='int',
                  help="k-points Nk1 along a1 [%default]")
parser.add_option("-y","--Nk2", dest='Nk2', default=1,type='int',
                  help="k-points Nk2 along a2 [%default]")
parser.add_option("-a","--Gk1", dest='Gk1', default=0,type='int',
                  help="Gaussian quadrature k-point sampling for a1 direction (2*GK1+1 points) [%default]")
parser.add_option("-b","--Gk2", dest='Gk2', default=0,type='int',
                  help="Gaussian quadrature k-point sampling for a2 direction (2*GK2+1 points) [%default]")
parser.add_option("-s", "--skipsym", dest='skipsymmetry',default=False,action='store_true',
                  help="Skip inversion (time-reversal) symmetry (i.e., k=-k) that reduces the number of k-point evaluations")

# Imaginary part to Greens functions
parser.add_option("-e","--eta", dest="eta", help="Imaginary part added to all energies (device and leads) [%default eV]",
                  type='float', default=1e-6)
parser.add_option("-l","--etaLead", dest="etaLead", help="Additional imaginary part added ONLY in the leads (surface GF) [%default eV]",
                  type='float', default=0.0)
# Other options
parser.add_option("-d", "--skipDOS", dest='dos',default=True,action='store_false',
                  help="Skip calculation of PDOS")
parser.add_option("--useSigNC", dest='signc',default=False,action='store_true',
                  help="Use SigNCfiles")
parser.add_option("--NumChan", dest="numchan", help="Number of eigenchannels [%default]",
                  type='int', default=10)

# Electrode stuff
parser.add_option("--bulk", dest='UseBulk',default=-1,action='store_true',
                  help="Use bulk in electrodes. The Hamiltonian from the electrode calculation is inserted into the electrode region in the TranSIESTA cell [TS.UseBulkInElectrodes]")
parser.add_option("--nobulk", dest='UseBulk',default=-1,action='store_false',
                  help="Use only self-energies in the electrodes. The full Hamiltonian of the TranSIESTA cell is used in combination with self-energies for the electrodes [TS.UseBulkInElectrodes]")

# Scale (artificially) coupling to electrodes
parser.add_option("--scaleSigL", dest="scaleSigL", help="Scale factor applied to Sigma_L [default=%default]",
                  type='float', default=1.0)
parser.add_option("--scaleSigR", dest="scaleSigR", help="Scale factor applied to Sigma_R [default=%default]",
                  type='float', default=1.0)

(options, args) = parser.parse_args()

# Destination directory
if len(args)!=1:
    parser.error('ERROR: You need to specify a destination directory')
else:
    options.DestDir = args[0]
if not os.path.isdir(options.DestDir):
    print '\npyTBT: Creating folder %s' %options.DestDir
    os.mkdir(options.DestDir)

# Log output to file                                                                                                                                                                                                
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
tee = subprocess.Popen(["tee", options.DestDir+"/Output.log"], stdin=subprocess.PIPE)
os.dup2(tee.stdin.fileno(), sys.stdout.fileno())
os.dup2(tee.stdin.fileno(), sys.stderr.fileno())

# Load Inelastica stuff
from Inelastica import SiestaIO as SIO
from Inelastica import pyTBT

# Read SIESTA files
options.head,tail = os.path.split(options.fn)
print "pyTBT: Reading keywords from %s \n"%options.fn

options.systemlabel = SIO.GetFDFlineWithDefault(options.fn,'SystemLabel', str, 'Systemlabel', 'Eigenchannels')       
options.TSHS = '%s/%s.TSHS'%(options.head,options.systemlabel)

# Electrodes
options.fnL  = options.head+'/'+SIO.GetFDFlineWithDefault(options.fn,'TS.HSFileLeft', str, None, 'pyTBT')
options.NA1L = SIO.GetFDFlineWithDefault(options.fn,'TS.ReplicateA1Left', int, 1, 'pyTBT')
options.NA2L = SIO.GetFDFlineWithDefault(options.fn,'TS.ReplicateA2Left', int, 1, 'pyTBT')
options.fnR  = options.head+'/'+SIO.GetFDFlineWithDefault(options.fn,'TS.HSFileRight', str, None, 'pyTBT')
options.NA1R = SIO.GetFDFlineWithDefault(options.fn,'TS.ReplicateA1Right', int, 1, 'pyTBT')
options.NA2R = SIO.GetFDFlineWithDefault(options.fn,'TS.ReplicateA2Right', int, 1, 'pyTBT')
if options.UseBulk < 0:
    options.UseBulk = SIO.GetFDFlineWithDefault(options.fn,'TS.UseBulkInElectrodes', bool, True, 'pyTBT')

# Device region
options.NumberOfAtoms = SIO.GetFDFlineWithDefault(options.fn,'NumberOfAtoms',int,0,'pyTBT')
if options.DeviceLast<options.DeviceFirst:
    print 'pyTBT error: DeviceLast<DeviceFirst not allowed. Setting DeviceLast=DeviceFirst'
    options.DeviceLast = options.DeviceFirst
options.DeviceAtoms = [max(options.DeviceFirst,1),min(options.DeviceLast,options.NumberOfAtoms)]

# Voltage
options.voltage = SIO.GetFDFlineWithDefault(options.fn,'TS.Voltage', float, 0.0, 'pyTBT')

# Energy range
if options.NPoints <= 0:
    options.NPoints = SIO.GetFDFlineWithDefault(options.fn,'TS.TBT.NPoints', int, 1, 'pyTBT')
if options.Emin == 1e10:
    options.Emin = SIO.GetFDFlineWithDefault(options.fn,'TS.TBT.Emin', float, 0.0, 'pyTBT')
if options.Emax == 1e10:
    options.Emax = SIO.GetFDFlineWithDefault(options.fn,'TS.TBT.Emax', float, 1.0, 'pyTBT')

if options.NPoints>1:
    options.dE = (options.Emax-options.Emin)/float(options.NPoints-1)
    options.Elist = N.array(range(int((options.Emax-options.Emin)/options.dE)+1),N.float)*options.dE+options.Emin
else:
    options.dE = 0.0
    options.Elist = N.array((options.Emin,),N.float)

print 'pyTBT: options.Elist =\n',options.Elist

pyTBT.calc(options)
